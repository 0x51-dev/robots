// Package abnf is autogenerated by https://github.com/0x51-dev/upeg. DO NOT EDIT.
package abnf

import (
	"github.com/0x51-dev/upeg/parser/op"
)

var (
	Robotstxt      = op.Capture{Name: "Robotstxt", Value: op.ZeroOrMore{Value: op.Or{Group, Sitemap, Others, Emptyline}}}
	Group          = op.Capture{Name: "Group", Value: op.And{Startgroupline, op.ZeroOrMore{Value: op.Or{Startgroupline, Emptyline}}, op.ZeroOrMore{Value: op.Or{Rule, Emptyline}}}}
	UserAgent      = op.Or{"user-agent", "User-agent", "User-Agent"}
	Startgroupline = op.Capture{Name: "Startgroupline", Value: op.And{op.ZeroOrMore{Value: WS}, UserAgent, op.ZeroOrMore{Value: WS}, ':', op.ZeroOrMore{Value: WS}, ProductToken, EOL}}
	Type           = op.Capture{Name: "Type", Value: op.Or{Allow, Disallow}}
	Allow          = op.Capture{Name: "Allow", Value: op.Or{"allow", "Allow"}}
	Disallow       = op.Capture{Name: "Disallow", Value: op.Or{"disallow", "Disallow"}}
	Rule           = op.Capture{Name: "Rule", Value: op.And{op.ZeroOrMore{Value: WS}, Type, op.ZeroOrMore{Value: WS}, ':', op.ZeroOrMore{Value: WS}, op.Or{PathPattern, EmptyPattern}, EOL}}
	Sitemap        = op.Capture{Name: "Sitemap", Value: op.And{op.ZeroOrMore{Value: WS}, SitemapPrefix, op.ZeroOrMore{Value: WS}, ':', op.ZeroOrMore{Value: WS}, SitemapUrl, EOL}}
	SitemapPrefix  = op.Or{"sitemap", "Sitemap"}
	SitemapUrl     = op.Capture{Name: "SitemapUrl", Value: op.ZeroOrMore{Value: UTF8CharNoctl}}
	Others         = op.Capture{Name: "Others", Value: op.And{op.ZeroOrMore{Value: WS}, Identifier, op.ZeroOrMore{Value: WS}, ':', op.ZeroOrMore{Value: WS}, OthersText, EOL}}
	OthersText     = op.Capture{Name: "OthersText", Value: op.ZeroOrMore{Value: UTF8CharNoctl}}
	ProductToken   = op.Capture{Name: "ProductToken", Value: op.Or{Identifier, '*'}}
	PathPattern    = op.Capture{Name: "PathPattern", Value: op.And{op.Or{'/', '*'}, op.ZeroOrMore{Value: UTF8CharNoctl}}}
	EmptyPattern   = op.ZeroOrMore{Value: WS}
	Identifier     = op.Capture{Name: "Identifier", Value: op.OneOrMore{Value: op.Or{rune(0x2D), op.RuneRange{Min: 0x41, Max: 0x5A}, rune(0x5F), op.RuneRange{Min: 0x61, Max: 0x7A}}}}
	Comment        = op.And{'#', op.ZeroOrMore{Value: op.Or{UTF8CharNoctl, WS, '#'}}}
	Emptyline      = EOL
	EOL            = op.And{op.ZeroOrMore{Value: WS}, op.Optional{Value: Comment}, NL}
	NL             = op.Or{rune(0x0D), rune(0x0A), op.And{rune(0x0D), rune(0x0A)}}
	WS             = op.Or{rune(0x20), rune(0x09)}
	UTF8CharNoctl  = op.Or{UTF81Noctl, UTF82, UTF83, UTF84}
	UTF81Noctl     = op.Or{rune(0x21), rune(0x22), op.RuneRange{Min: 0x24, Max: 0x7F}}
	UTF82          = op.And{op.RuneRange{Min: 0xC2, Max: 0xDF}, UTF8Tail}
	UTF83          = op.Or{op.And{rune(0xE0), op.RuneRange{Min: 0xA0, Max: 0xBF}, UTF8Tail}, op.And{op.RuneRange{Min: 0xE1, Max: 0xEC}, op.Repeat{Min: 2, Max: 2, Value: UTF8Tail}}, op.And{rune(0xED), op.RuneRange{Min: 0x80, Max: 0x9F}, UTF8Tail}, op.And{op.RuneRange{Min: 0xEE, Max: 0xEF}, op.Repeat{Min: 2, Max: 2, Value: UTF8Tail}}}
	UTF84          = op.Or{op.And{rune(0xF0), op.RuneRange{Min: 0x90, Max: 0xBF}, op.Repeat{Min: 2, Max: 2, Value: UTF8Tail}}, op.And{op.RuneRange{Min: 0xF1, Max: 0xF3}, op.Repeat{Min: 3, Max: 3, Value: UTF8Tail}}, op.And{rune(0xF4), op.RuneRange{Min: 0x80, Max: 0x8F}, op.Repeat{Min: 2, Max: 2, Value: UTF8Tail}}}
	UTF8Tail       = op.RuneRange{Min: 0x80, Max: 0xBF}
)
